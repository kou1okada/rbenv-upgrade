#!/usr/bin/env bash
#
# Summary: upgrade the rbenv and installed plugins.
#
# Usage: rbenv upgrade [ options ] [ targets ... ]
#
#   -a/--all         upgrade all targets
#   -l/--list        list targets
#   -n/--dry-run     perform a trial run with no changes made
#   --no-color       no color output
#

#
# rbenv-upgrade - upgrade subcommand for rbenv.
# Copyright (c) 2013 Koichi OKADA. All rights reserved.
# This script is distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php
#

function usage () # [<exit code>]
#   Display usage.
#   If <exit code> is passed, exit with it.
{
  rbenv-help upgrade 2>/dev/null || sed -ne '/^#/!q;s/.//;s/.//;1,4d;p' < "$0"
  [ -z "$1" ] || exit "$1"
}

function nocolor () # [<nocolor flag>]
#   Drop color from stdin if <nocolor flag> is passed.
{
  if [ "$1" != "" ]; then
    sed -r 's/\x1b\[([0-9]+(;[0-9]+)*)?[m]//g'
  else
    cat
  fi
}

function update_alltargets () #
#   Return ${ALLTARGETS[@]} for all available targets.
{
  ALLTARGETS=(.)
  if [ "$RBENV_ROOT" != "" ]; then
    readarray -t ALLTARGETS < <(
      echo .
      find "$RBENV_ROOT"/plugins/ -mindepth 1 -maxdepth 1 -xtype d -printf "%f\n"
    )
  else
    echo -e "\e[32;1mError:\e[0m \$RBENV_ROOT is not set." | nocolor  $OPT_no_color
    exit 1
  fi
}

function completion () #
#   Provide rbenv completions.
{
  cat <<-EOD
		$ALLTARGETS
		-a
		-h
		-n
		--all
		--dry-run
		--help
		--no-color
	EOD
  exit
}

function upgrade () # <target dir>
#   Do upgrade target directory.
{
  (
    echo -e "\e[32;1mUpgrade:\e[0m $1" | nocolor $OPT_no_color
    cd "$1"
    if [ -d .git ]; then
      if [ "$OPT_dry_run" = "" ]; then
        git pull
      else
        git fetch --dry-run --verbose
      fi
    else
      echo -e "\e[32;1mSKip:\e[0m  No .git directory exists." | nocolor $OPT_no_color
    fi
    echo
  )
}

function get_target_dir () # <target>
#   Get TARGETDIR for target.
{
  local TARGETDIR
  case "$1" in
    .) TARGETDIR="${RBENV_ROOT}"            ;;
    *) TARGETDIR="${RBENV_ROOT}/plugins/$1" ;;
  esac
  if [ ! -d "$TARGETDIR" ]; then
    echo -e "\e[31;1mError:\e[0m $TARGETDIR is not directory." >&2 | nocolor $OPT_no_color
    usage 1
  fi
  echo "$TARGETDIR"
}

function update_action () # [option] <action> <cause>
#   Update action.
# Args:
#    <action> : New action to be set.
#    <cause>  : The couse of updated action.
{
  if [ "$ACTION" != "" ]; then
    echo -e "\e[31;1mWarning:\e[0m action is overwritten from $ACTION to $1 by $2." >&2 | nocolor $OPT_no_color
    usage 1
  fi
  ACTION="$1"
}

while [ "$1" != "" ]; do
  case "$1" in
    -a|--all)
      OPT_all="$1"
      update_action upgrade "$1"
      shift
      ;;
    --complete)
      OPT_complete="$1"
      shift
      ;;
    -h|--help)
      OPT_help="$1"
      update_action help "$1"
      shift
      ;;
    -l|--list)
      OPTS_list="$1"
      update_action list "$1"
      shift
      ;;
    -n|--dry-run)
      OPT_dry_run="$1"
      shift
      ;;
    --no-color)
      OPT_no_color="$1"
      shift
      ;;
    *)
      if getopts "" opt; then
        case "$opt" in
          ?)
            echo -e "\e[31;1mError:\e[0m unknown option $1." | nocolor $OPT_no_color
            usage 1 ;;
        esac
        shift $(( $OPTIND - 1 ))
      else
        TARGETS+=("$1")
        shift
      fi
      ;;
  esac
done

if [ "$ACTION" = "" ]; then
  ACTION=upgrade
fi

if [ "$OPT_help" != "" ]; then
  usage 0
fi

if [ "$OPT_complete" != "" ]; then
  completion
fi

update_alltargets

if [ "$OPT_all" != "" ]; then
  if [ "$TARGETS" != "" ]; then
    echo -e "\e[32;1mWarning:\e[0m $OPT_all options is set, but targets is also set." | nocolor $OPT_no_color
  fi
  TARGETS=("${ALLTARGETS[@]}")
fi

for i in "${TARGETS[@]}"; do
  TARGETDIRS+=("$(get_target_dir "$i")")
done

case "$ACTION" in
  upgrade)
    for i in "${TARGETDIRS[@]}"; do
      upgrade "$i"
    done
    ;;
  list)
    printf "%-24s %s\n" "target" "target_dir"
    for i in "${ALLTARGETS[@]}"; do
      printf "%-24s %s\n" "$i" "$(get_target_dir "$i")"
    done
    ;;
  *)
    echo -e "\e[31;1mError:\e[0m unknown action "$ACTION"." | nocolor $OPT_no_color
    usage 1
    ;;
esac
